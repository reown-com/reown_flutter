# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: ci
permissions:
  contents: read

on:
  # push:
  #   branches: [ master ]
  # pull_request:
  #   branches: [ master ]
  workflow_dispatch:
    inputs:
      integration:
        description: 'Run integration tests?'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      maestro:
        description: 'Run maestro tests?'
        required: false
        default: 'android'
        type: choice
        options:
          - 'android'
          - 'ios'
          - 'both'
          - 'none'

concurrency:
  # Support push/pr as event types with different behaviors each:
  # 1. push: queue up builds by branch
  # 2. pr: only allow one run per PR
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.event.pull_request.number || github.ref_name }}
  # If there is already a workflow running for the same pull request, cancel it
  # For non-PR triggers queue up builds
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  tests:
    # strategy:
    #   matrix:
    #     include:
    #       - test-type: integration-tests
    #         runner: macos-14
    #       - test-type: maestro-tests
    #         runner: ubuntu-latest
    runs-on: ubuntu-latest

    steps:
      # Checkout the repo
      - name: Checkout repository
        uses: actions/checkout@v4
  
      # Install Java 17
      - name: Install Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          architecture: x86_64
          cache: 'gradle'
  
      # Cache Gradle
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      # Install Flutter SDK
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.5'

      # Get package dependencies for dapp and generate files
      - name: Get package dependencies for dapp and generate files
        shell: bash
        working-directory: packages/reown_appkit/example/base
        run: |
            flutter pub get
            flutter pub run build_runner build --delete-conflicting-outputs
            dart format --output=none --set-exit-if-changed .
      
      # Get package dependencies for wallet and generate files
      - name: Get package dependencies for wallet and generate files
        shell: bash
        working-directory: packages/reown_walletkit/example
        run: |
            flutter pub get
            flutter pub run build_runner build --delete-conflicting-outputs
            dart format --output=none --set-exit-if-changed .
      
      - name: Add Secrets file
        working-directory: packages/reown_appkit/example/base/android
        run: touch secrets.properties && echo "${{ secrets.SECRETS_FILE }}" >> secrets.properties

      - name: Add Keystore file
        working-directory: packages/reown_appkit/example/base/android
        run: echo "${{ secrets.KEYSTORE }}" | base64 --decode >> app/debug.keystore

      - name: Add Secrets file
        working-directory: packages/reown_walletkit/example/android
        run: touch secrets.properties && echo "${{ secrets.SECRETS_FILE }}" >> secrets.properties

      - name: Add Keystore file
        working-directory: packages/reown_walletkit/example/android
        run: echo "${{ secrets.KEYSTORE }}" | base64 --decode >> app/debug.keystore
      
      - name: Check Runner Resources
        shell: bash
        run: |
          echo "CPU Info:"
          lscpu
          echo "Memory Info:"
          free -m
          echo "Disk Space:"
          df -h

      # MAESTRO TESTS
      - name: Enable KVM
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils
          sudo modprobe kvm
          sudo chown runner:runner /dev/kvm
          sudo chmod 666 /dev/kvm
          ls -l /dev/kvm
          kvm-ok || echo "KVM not supported or not enabled"

      # Install Maestro
      - name: Install Maestro
        shell: bash
        run: |
          curl -Ls "https://get.maestro.mobile.dev" | bash
          export PATH="$PATH":"$HOME/.maestro/bin"
          echo "$HOME/.maestro/bin" >> $GITHUB_PATH
          maestro --version

      # Setup Android SDK
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      # Build and install Flutter Wallet to be used on Android emulator
      - name: Build and install Flutter Wallet to be used on Android emulator
        shell: bash
        working-directory: packages/reown_walletkit/example
        env:
          WALLET_PROJECT_ID: ${{ secrets.WALLET_PROJECT_ID }}
        run: |
          flutter build apk --flavor internal --build-name 3.0.0 --dart-define="PROJECT_ID=$WALLET_PROJECT_ID" --debug
          mv build/app/outputs/flutter-apk/app-internal-debug.apk $GITHUB_WORKSPACE/wallet-debug.apk

      # Build and install Flutter Dapp to be used on Android emulator
      - name: Build and install Flutter Dapp to be used on Android emulator
        shell: bash
        working-directory: packages/reown_appkit/example/base
        env:
          PROJECT_ID: ${{ secrets.DAPP_PROJECT_ID }}
        run: |
          flutter build apk --flavor internal --build-name 3.0.0 --dart-define="PROJECT_ID=$PROJECT_ID" --debug
          mv build/app/outputs/flutter-apk/app-internal-debug.apk $GITHUB_WORKSPACE/dapp-debug.apk
      
      - name: Restart ADB Server
        shell: bash
        run: |
          adb kill-server
          adb start-server
          adb devices

      # Start Android Emulator
      - name: Start Android Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 33
          target: default # Use AOSP instead of Google APIs
          arch: x86_64
          ram-size: 4096M
          emulator-boot-timeout: 900
          profile: pixel_4
          emulator-options: -no-window -gpu guest -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          pre-emulator-launch-script: |
            echo "Running pre emulator launch script. Printing the working directory now:"
            pwd
            echo "Checking KVM support:"
            ls -l /dev/kvm
            kvm-ok || echo "KVM not supported or not enabled"
            echo "Listing AVDs:"
            avdmanager list avd
          script: |
            echo "Listing running emulator processes:"
            ps aux | grep emulator || echo "No emulator processes found"
            echo "Checking ADB server status:"
            adb kill-server
            adb start-server
            adb devices
            echo "Waiting for emulator to boot..."
            # Continue with original script
            echo "Listing available devices:"
            avdmanager list device
            echo "Listing available APKs:"
            find $GITHUB_WORKSPACE -name "*.apk"
            # Verify emulator is running
            adb devices
            echo "Installing APKs:"
            find $GITHUB_WORKSPACE -name "*.apk" -exec adb install -r {} \;
            echo "Installed apps:"
            adb shell pm list packages
            echo "Running Maestro native to native tests:"
            mkdir -p .maestro/videos/
            maestro test .maestro/native/connect_reject_session_flow.yaml
            maestro test .maestro/native/connect_approve_session_sign_message_disconnect_LM_flow.yaml
            maestro test .maestro/native/connect_approve_session_sign_message_disconnect_RELAY_flow.yaml
            # Move any remaining MP4 files from root to videos directory
            find . -maxdepth 1 -name "*.mp4" -exec mv {} .maestro/videos/ \;


# Launch locally
# act --container-architecture linux/amd64 -P ubuntu-latest=-self-hosted --secret-file .github/workflows/.env.secret -W .github/workflows/ci.yml workflow_dispatch --input integration=false --input maestro=android
