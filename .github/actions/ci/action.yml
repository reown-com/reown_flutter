name: ci
description: Execute Tests

inputs:
  type:
    description: The type of CI to run.
    required: true
  platform:
    description: Platform where to run tests (ios/android)
    required: true
  relay-endpoint:
    description: "The endpoint of the relay e.g. relay.walletconnect.org"
    required: false
    default: "wss://relay.walletconnect.org"
  project-id:
    description: "Reown dapp project id"
    required: true
  wallet-project-id:
    description: "Reown wallet project id"
    required: true
  yttrium-version:
    description: "Android Yttrium version for CI"
    required: true

runs:
  using: composite
  steps:
    # INTEGRATION TESTS

    # Run Core Unit and Integration Tests
    - name: Run Core tests
      if: inputs.type == 'integration-tests'
      shell: bash
      working-directory: packages/reown_core
      env:
        RELAY_ENDPOINT: ${{ inputs.relay-endpoint }}
        PROJECT_ID: ${{ inputs.project-id }}
      run: flutter test --dart-define=RELAY_ENDPOINT=$RELAY_ENDPOINT --dart-define=PROJECT_ID=$PROJECT_ID

    # Run Sign Unit and Integration Tests
    - name: Run Sign tests
      if: inputs.type == 'integration-tests'
      shell: bash
      working-directory: packages/reown_sign
      env:
        RELAY_ENDPOINT: ${{ inputs.relay-endpoint }}
        PROJECT_ID: ${{ inputs.project-id }}
      run: flutter test --dart-define=RELAY_ENDPOINT=$RELAY_ENDPOINT --dart-define=PROJECT_ID=$PROJECT_ID

    # Run AppKit Unit and Integration Tests
    - name: Run AppKit tests
      if: inputs.type == 'integration-tests'
      shell: bash
      working-directory: packages/reown_appkit
      env:
        RELAY_ENDPOINT: ${{ inputs.relay-endpoint }}
        PROJECT_ID: ${{ inputs.project-id }}
      run: flutter test --dart-define=RELAY_ENDPOINT=$RELAY_ENDPOINT --dart-define=PROJECT_ID=$PROJECT_ID

    # Run WalletKit Unit and Integration Tests
    - name: Run WalletKit tests
      if: inputs.type == 'integration-tests'
      shell: bash
      working-directory: packages/reown_walletkit
      env:
        RELAY_ENDPOINT: ${{ inputs.relay-endpoint }}
        PROJECT_ID: ${{ inputs.project-id }}
      run: flutter test --dart-define=RELAY_ENDPOINT=$RELAY_ENDPOINT --dart-define=PROJECT_ID=$PROJECT_ID

    # MAESTRO TESTS

    # Generate random string for artifacts
    - name: Generate random string
      if: inputs.type == 'maestro-tests'
      shell: bash
      run: |
        RANDOM_STRING=$(openssl rand -hex 5)
        echo "RANDOM_STRING=$RANDOM_STRING" >> $GITHUB_ENV
    
    # Enable KVM
    - name: Enable KVM
      if: inputs.type == 'maestro-tests' && inputs.platform == 'android'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils
        sudo modprobe kvm
        sudo chown runner:runner /dev/kvm
        sudo chmod 666 /dev/kvm
        ls -l /dev/kvm
        kvm-ok || echo "KVM not supported or not enabled"

    # Install Maestro
    - name: Install Maestro
      if: inputs.type == 'maestro-tests'
      shell: bash
      run: |
        curl -Ls "https://get.maestro.mobile.dev" | bash
        export PATH="$PATH":"$HOME/.maestro/bin"
        echo "$HOME/.maestro/bin" >> $GITHUB_PATH
        maestro --version

    # Setup Android SDK
    - name: Setup Android SDK
      if: inputs.type == 'maestro-tests' && inputs.platform == 'android'
      uses: android-actions/setup-android@v2

    # Build Flutter Wallet to be used on Android emulator
    - name: Build Flutter Wallet to be used on Android emulator
      if: inputs.type == 'maestro-tests' && inputs.platform == 'android'
      shell: bash
      working-directory: packages/reown_walletkit/example
      env:
        WALLET_PROJECT_ID: ${{ inputs.wallet-project-id }}
        YTTRIUM_VERSION: ${{ inputs.yttrium-version }}
      run: |
        flutter build apk --flavor internal --build-name 3.0.0-${{ env.RANDOM_STRING }} --dart-define="PROJECT_ID=$WALLET_PROJECT_ID" --release --target-platform android-x64 --split-per-abi -PyttriumCiVersion=$YTTRIUM_VERSION
        # flutter build apk --flavor internal --build-name 3.0.0-internal --dart-define="PROJECT_ID=" --release --target-platform android-x64 --split-per-abi -PyttriumCiVersion=0.0.19-ci
        mv build/app/outputs/flutter-apk/app-x86_64-internal-release.apk $GITHUB_WORKSPACE/wallet-release.apk
        # mv build/app/outputs/flutter-apk/app-x86_64-internal-release.apk /Users/alfreedom/Development/Reown/reown_flutter/wallet-release.apk

    # Build Flutter Dapp to be used on Android emulator
    - name: Build Flutter Dapp to be used on Android emulator
      if: inputs.type == 'maestro-tests' && inputs.platform == 'android'
      shell: bash
      working-directory: packages/reown_appkit/example/base
      env:
        PROJECT_ID: ${{ inputs.project-id }}
      run: |
        flutter build apk --flavor internal --build-name 3.0.0-${{ env.RANDOM_STRING }} --dart-define="PROJECT_ID=$PROJECT_ID" --release --target-platform android-x64 --split-per-abi
        # flutter build apk --flavor internal --build-name 3.0.0-internal --dart-define="PROJECT_ID=" --release --target-platform android-x64 --split-per-abi
        mv build/app/outputs/flutter-apk/app-x86_64-internal-release.apk $GITHUB_WORKSPACE/dapp-release.apk
        # mv build/app/outputs/flutter-apk/app-x86_64-internal-release.apk /Users/alfreedom/Development/Reown/reown_flutter/dapp-release.apk
    
    # Restart ADB Server
    - name: Restart ADB Server
      if: inputs.type == 'maestro-tests' && inputs.platform == 'android'
      shell: bash
      run: |
        adb kill-server
        adb start-server
        adb devices

    # Start Android Emulator
    - name: Start Android Emulator
      if: inputs.type == 'maestro-tests' && inputs.platform == 'android'
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 33
        target: google_apis
        arch: x86_64
        ram-size: 4096M
        # heap-size: 576M
        emulator-boot-timeout: 900
        profile: pixel_6
        avd-name: test_device
        emulator-options: -no-window -gpu guest -noaudio -no-boot-anim -camera-back none -netdelay none -netspeed full -snapshot default
        disable-animations: true
        pre-emulator-launch-script: |
          echo "Running pre emulator launch script. Printing the working directory now:"
          pwd
          
          echo "Checking KVM support:"
          ls -l /dev/kvm
          kvm-ok || echo "KVM not supported or not enabled"
          
          echo "Listing AVDs:"
          avdmanager list avd
        script: |
          echo "Listing running emulator processes:"
          ps aux | grep emulator || echo "No emulator processes found"

          echo "Checking ADB server status:"
          adb kill-server
          adb start-server
          adb devices

          # Start logcat capture in background
          adb logcat -v time > maestro_logcat.txt &
          LOGCAT_PID=$!
          
          echo "Waiting for emulator to boot..."
          # Continue with original script
          echo "Listing available devices:"
          avdmanager list device
          
          echo "Listing available APKs:"
          find $GITHUB_WORKSPACE -name "*.apk"
          
          # Verify emulator is running
          adb devices
          
          echo "Installing APKs:"
          find $GITHUB_WORKSPACE -name "*.apk" -exec adb install -r {} \;
          
          echo "Installed apps:"
          adb shell pm list packages
          
          echo "Running Maestro native to native tests:"

          mkdir -p .maestro/videos/

          # START: logcat capture
          echo "Starting logcat capture..."
          adb logcat -v time > maestro_logcat.txt &
          LOGCAT_PID=$!
          # END: logcat capture start

          # maestro test .maestro/native/launch_wallet.yaml
          maestro test .maestro/native/connect_reject_session_flow.yaml
          maestro test .maestro/native/connect_approve_session_sign_message_disconnect_LM_flow.yaml
          maestro test .maestro/native/connect_approve_session_sign_message_disconnect_RELAY_flow.yaml

          # END: stop logcat
          echo "Stopping logcat capture..."
          kill $LOGCAT_PID || true

          # Move any remaining MP4 files from root to videos directory
          find . -maxdepth 1 -name "*.mp4" -exec mv {} .maestro/videos/ \;

    # Start iOS Simulator
    - name: Start iOS Simulator
      if: inputs.type == 'maestro-tests' && inputs.platform == 'ios'
      shell: bash
      run: |
        # Install IDB (iOS Device Bridge) for iOS simulator support
        brew tap facebook/fb
        brew install facebook/fb/idb-companion

        # Ensure Xcode Command Line Tools are available (rarely needed on macos-14)
        xcode-select --install || true

        # Get the first available iPhone simulator
        SIMULATOR_UDID=$(xcrun simctl list devices available | grep "iPhone" | grep -Ev "Pro|Plus|Max|SE" | sort -rV | head -n 1 | awk -F '[()]' '{print $2}')
        echo "Selected simulator UDID: $SIMULATOR_UDID"

        if xcrun simctl list devices | grep "$SIMULATOR_UDID" | grep -q "(Booted)"; then
          echo "$SIMULATOR_UDID is booted."
        else
          echo "$SIMULATOR_UDID is not booted. Booting..."
          xcrun simctl boot "$SIMULATOR_UDID"
          echo "$SIMULATOR_UDID booted"
        fi

        # Output the simulator UDID for the next step
        echo "SIMULATOR_UDID=$SIMULATOR_UDID" >> $GITHUB_ENV

    # Build and install Flutter Wallet to be used on iOS simulator
    - name: Build and install Flutter Wallet to be used on iOS simulator
      if: inputs.type == 'maestro-tests' && inputs.platform == 'ios'
      shell: bash
      working-directory: packages/reown_walletkit/example
      env:
        WALLET_PROJECT_ID: ${{ inputs.wallet-project-id }}
        SIMULATOR_UDID: ${{ env.SIMULATOR_UDID }}
      run: |
        # Build and install the Flutter iOS wallet
        flutter build ios --flavor internal --build-name 3.0.0-${{ env.RANDOM_STRING }} --dart-define="PROJECT_ID=$WALLET_PROJECT_ID" --simulator --debug
        xcrun simctl install "$SIMULATOR_UDID" build/ios/iphonesimulator/Runner.app

    # Build and install Flutter Dapp to be used on iOS simulator
    - name: Build and install Flutter Dapp to be used on iOS simulator
      if: inputs.type == 'maestro-tests' && inputs.platform == 'ios'
      shell: bash
      working-directory: packages/reown_appkit/example/base
      env:
        PROJECT_ID: ${{ inputs.project-id }}
        SIMULATOR_UDID: ${{ env.SIMULATOR_UDID }}
      run: |
        # Build and install the Flutter iOS dapp
        flutter build ios --flavor internal --build-name 3.0.0-${{ env.RANDOM_STRING }} --dart-define="PROJECT_ID=$PROJECT_ID" --simulator --debug
        xcrun simctl install "$SIMULATOR_UDID" build/ios/iphonesimulator/Runner.app

    # Run Maestro flows on iOS simulator
    - name: Run Maestro flows on iOS simulator
      if: inputs.type == 'maestro-tests' && inputs.platform == 'ios'
      shell: bash
      env:
        MAESTRO_DRIVER_STARTUP_TIMEOUT: 30000 # Increase timeout to 30 seconds
      run: |
        mkdir -p .maestro/videos/
        # Run Maestro tests in parallel
        maestro test .maestro/native/launch_wallet.yaml
        maestro test .maestro/native/connect_reject_session_flow.yaml
        maestro test .maestro/native/connect_approve_session_sign_message_disconnect_LM_flow.yaml
        maestro test .maestro/native/connect_approve_session_sign_message_disconnect_RELAY_flow.yaml

        # Move any remaining MP4 files from root to videos directory
        find . -maxdepth 1 -name "*.mp4" -exec mv {} .maestro/videos/ \;

    # Upload Maestro Test Artifacts
    - name: Zip Maestro Test Artifacts
      if: failure() && inputs.type == 'maestro-tests'
      shell: bash
      run: |
        mkdir -p ./maestro-artifacts
        cp -r /home/runner/.maestro/tests/* ./maestro-artifacts/ || true
        cp -r .maestro/videos/* ./maestro-artifacts/ || true
        cp *.mp4 ./maestro-artifacts/ || true
        cp maestro_logcat.txt ./maestro-artifacts/ || true  # ✅ Include logcat
        zip -r maestro-test-results-${{ env.RANDOM_STRING }}.zip ./maestro-artifacts/

    # Upload Zipped Maestro Artifacts
    - name: Upload Zipped Maestro Artifacts
      if: failure() && inputs.type == 'maestro-tests'
      uses: actions/upload-artifact@v4
      with:
        name: maestro-test-results-${{ env.RANDOM_STRING }}-zip
        path: maestro-test-results-${{ env.RANDOM_STRING }}.zip
        retention-days: 7
