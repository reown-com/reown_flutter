# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "120"

default_platform(:ios)

platform :ios do

  # Helper method to read the changelog
  def read_changelog
    changelog_file = '../../../../CHANGELOG.md'
    changelog = ""
  
    if File.exist?(changelog_file)
      File.open(changelog_file, 'r') do |file|
        changelog = file.read
      end
  
      # Split the changelog into entries based on the version header pattern
      entries = changelog.split(/^##\s/)
  
      # Get the latest entry, which is the first one after splitting
      latest_entry = entries[1]
  
      # Re-add the '##' header to the latest entry and remove empty lines
      changelog = latest_entry.strip if latest_entry
      changelog = changelog.gsub /^$\n/, ''
    else
      UI.user_error!("CHANGELOG.md file not found")
    end
  
    changelog
  end

  lane :release_testflight do |options|
    
    # Setup the keychain and match to work with CI
    setup_ci

    match_password = ENV['MATCH_PASSWORD']
    slack_url = ENV['SLACK_URL']
    app_identifier = ENV['BUNDLE_ID']
    _testflight_url = ENV['TESTFLIGHT_URL']

    api_key = app_store_connect_api_key(
      key_id: options[:app_store_key_id],
      issuer_id: options[:apple_issuer_id],
      key_content: options[:app_store_connect_key],
      duration: 1200,            
      in_house: false,
    )

    match(
      readonly: false,
      type: "appstore",
      app_identifier: "#{app_identifier}",
      git_url: options[:match_git_url],
      git_basic_authorization: options[:token],
      api_key: api_key,
      include_all_certificates: true,
      force_for_new_devices: true,
      force_for_new_certificates: true,
      verbose: true,
    )

    number = latest_testflight_build_number(
      app_identifier: "#{app_identifier}",
      username: options[:username],
    )
    if number && !number.to_s.empty?
      new_build_number = number.to_i + 1
    else
      # Handle the case where there is no previous build number
      new_build_number = 1
    end

    increment_build_number(
      build_number: new_build_number,
      xcodeproj: "Runner.xcodeproj"
    )

    _flavor = options[:flavor]

    gym(
      configuration: "Release-#{_flavor}",
      # project: "Runner.xcodeproj",
      workspace: "Runner.xcworkspace",
      scheme: _flavor,
      export_method: "app-store",
      clean: true,
      xcargs: "PROJECT_ID='#{options[:project_id]}'"
    )

    _app_version = "3.0.0" #"options[:app_version]"
    
    changelog = read_changelog

    upload_to_testflight(
      apple_id: options[:app_id],
      app_version: "#{_app_version}",
      build_number: "#{new_build_number}",
      app_identifier: "#{app_identifier}",
      changelog: changelog,
      distribute_external: true,
      notify_external_testers: true,
      skip_waiting_for_build_processing: false,
      beta_app_feedback_email: "alfredo@reown.com",
      beta_app_description: "AppKit sample app",
      groups: ["External Testers"]
    )

    slack(
      message: ":reown-appkit: üçé AppKit Flutter iOS Sample #{_app_version}-#{_flavor} (#{new_build_number}) successfully released!\n\n",
      default_payloads: [],
      attachment_properties: {
        fields: [
          {
            title: "CHANGELOG",
            value: changelog,
          },
          {
            title: "LINK",
            value: "#{_testflight_url}",
          },
        ]
      }
    )

    clean_build_artifacts()

  end

end
